{"version":3,"sources":["components/Number.js","components/Cylinder.js","components/DemandRow.js","App.js","reportWebVitals.js","index.js"],"names":["Number","event","this","props","onChange","item","target","value","InputGroup","className","Text","label","FormControl","readOnly","readonly","type","aria-label","tooltip","bind","suffix","Component","Cylinder","id","removeCylinder","cylinder_count","onChangeCylinderCount","cylinder_volume","onChangeCylinderVolume","cylinder_atm","onChangeCylinderATM","onClick","DemandRow","onChangeDemand","what","patients","onPatientsChange","criterion","flow_req","onFlowReqChange","use_per_category","App","savedState","getSavedState","state","vie_total_supply","lox_exp_ratio","lox_l_per_kg","ambient_pressure","cylinders","litres_per_min_use","tons_per_day_usage","litres_per_min_capacity","demand_prediction","saveAlert","setState","cyls","push","length","pop","localStorage","setItem","JSON","stringify","setTimeout","hideSaveAlert","parse","getItem","l_o2_stp","calculated_supply","Math","round","calculated_cylinder_volume","map","cyl","reduce","total","i","cylinder","index","onChangeCylinder","Button","variant","style","position","right","top","saveState","size","Alert","onClose","dismissable","Form","maxWidth","width","Accordion","defaultActiveKey","Toggle","as","eventKey","Collapse","Card","Body","Header","ListGroup","Item","addCylinder","float","onBlur","toFixed","Table","striped","bordered","hover","demand","d","a","b","fontSize","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1779315.chunk.js","sourcesContent":["import {FormControl, InputGroup} from \"react-bootstrap\";\nimport {Component} from \"react\";\n\n\nexport class Number extends Component{\n\n    onChange(event){\n        if(this.props.onChange){\n            this.props.onChange(this.props.item, event.target.value)\n        }\n    }\n\n    render(){\n        return(<InputGroup className=\"mb-3\">\n            <InputGroup.Text>{this.props.label}</InputGroup.Text>\n            <FormControl readOnly={this.props.readonly} type={\"number\"} value={this.props.value} aria-label={this.props.tooltip} onChange={this.onChange.bind(this)}/>\n                {this.props.suffix ? <InputGroup.Text>{this.props.suffix}</InputGroup.Text> : null }\n        </InputGroup>\n        );\n    }\n}","import {FormControl, InputGroup} from \"react-bootstrap\";\nimport {Component} from \"react\";\n\nexport class Cylinder extends Component{\n\n    onChangeCylinderCount(event){\n        if(this.props.onChange){\n            this.props.onChange(this.props.id, \"cylinder_count\", event.target.value)\n        }\n    }\n    onChangeCylinderVolume(event){\n        if(this.props.onChange){\n            this.props.onChange(this.props.id, \"cylinder_volume\", event.target.value)\n        }\n    }\n    onChangeCylinderATM(event){\n        if(this.props.onChange){\n            this.props.onChange(this.props.id, \"cylinder_atm\", event.target.value)\n        }\n    }\n    removeCylinder(event){\n        this.props.removeCylinder(this.props.id)\n    }\n\n    render(){\n        return(<InputGroup className=\"mb-3\">\n            <InputGroup.Text >Set {this.props.id+1}</InputGroup.Text>\n            <InputGroup.Text>#</InputGroup.Text>\n            <FormControl type={\"number\"} value={this.props.cylinder_count} aria-label={\"\"} onChange={this.onChangeCylinderCount.bind(this)}/>\n            <InputGroup.Text>{\"Cylinders with Volume\"}</InputGroup.Text>\n            <FormControl type={\"number\"} value={this.props.cylinder_volume} aria-label={\"\"} onChange={this.onChangeCylinderVolume.bind(this)}/>\n            <InputGroup.Text>{\"litres at full pressure\"}</InputGroup.Text>\n            <FormControl type={\"number\"} value={this.props.cylinder_atm} aria-label={\"\"} onChange={this.onChangeCylinderATM.bind(this)}/>\n            <InputGroup.Text>{\"ATM\"}</InputGroup.Text>\n            <FormControl type={\"button\"} value=\"-\" className={\"removeCylinder\"} onClick={this.removeCylinder.bind(this)}/>\n        </InputGroup>\n        );\n    }\n}","import {Component} from \"react\";\nimport {FormControl} from \"react-bootstrap\";\n\n\nexport class DemandRow extends Component{\n\n    onFlowReqChange(event){\n        this.props.onChangeDemand(this.props.id, \"flow_req\", event.target.value)\n    }\n    onPatientsChange(event){\n        this.props.onChangeDemand(this.props.id, \"patients\", event.target.value)\n\n    }\n\n    render(){\n      return(<tr>\n          <td className=\"text-sm-start align-middle form-control-sm\">{this.props.what}</td>\n          <td><FormControl type={\"number\"} value={this.props.patients} aria-label={this.props.tooltip} onChange={this.onPatientsChange.bind(this)}/></td>\n          <td className=\"text-sm-center align-middle form-control-sm\">{this.props.criterion}</td>\n            <td><FormControl type={\"number\"} value={this.props.flow_req} aria-label={this.props.tooltip} onChange={this.onFlowReqChange.bind(this)}/></td>\n          <td><FormControl type={\"number\"} value={this.props.use_per_category || this.props.patients*this.props.flow_req} aria-label={this.props.tooltip} readOnly={true} /></td>\n\n        </tr>\n      );\n    }\n}","import './App.css';\nimport {Accordion, Alert, Button, Card, Form, FormControl, InputGroup, ListGroup, Table} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Component} from \"react\";\nimport {Number} from \"./components/Number\";\nimport {Cylinder} from \"./components/Cylinder\";\nimport {DemandRow} from \"./components/DemandRow\";\nimport {MdSave, MdSettings} from \"react-icons/md\";\n\n// eslint-disable-next-line no-undef\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        const savedState = this.getSavedState()\n        this.state = savedState || {vie_total_supply: 47,\n            lox_exp_ratio: 861,\n            lox_l_per_kg: 0.8767,\n            ambient_pressure: 1013,\n            cylinders: [{cylinder_count:1,\n            cylinder_volume:2,\n            cylinder_atm:134}],\n            litres_per_min_use:1835,\n            tons_per_day_usage:3.5,\n            litres_per_min_capacity:3000,\n            demand_prediction:[\n                {what:\"Ventilated patients\",criterion:\"liters/min per vent:\",patients:30,flow_req:40},\n                {what:\"CPAP systems\",criterion:\"\",patients:10,flow_req:30},\n                {what:\"HFNC systems\",criterion:\"\",patients:6,flow_req:60},\n                {what:\"Face-mask Oxygen\",criterion:\"\",patients:50,flow_req:10},\n                {what:\"\\\"Double-barrel\\\" NPO2:\",criterion:\"\",patients:5,flow_req:15},\n                {what:\"Patients on NPO2\",criterion:\"liters/min per pt:\",patients:20,flow_req:5},\n                {what:\"Patients under anaesthesia\",criterion:\"liters/min average:\",patients:10,flow_req:2},\n            ],\n            saveAlert:false\n        }\n    }\n\n    onChange(item, value) {\n        let state = {}\n        state[item] = value\n        this.setState(state)\n    }\n    onChangeCylinder(id, item, value){\n        let state = this.state\n        state.cylinders[id][item] = value\n        this.setState(state)\n    }\n    onChangeDemand(id, item, value){\n        let state = this.state\n        state.demand_prediction[id][item] = value\n        this.setState(state)\n    }\n\n    addCylinder(){\n        let cyls = this.state.cylinders\n        cyls.push({cylinder_count:0,\n            cylinder_volume:0,\n            cylinder_atm:0})\n        this.setState({cylinders:cyls})\n    }\n    removeCylinder(id){\n        if (this.state.cylinders.length === 1){\n            return\n        }\n        let cyls = this.state.cylinders\n        cyls.pop(id)\n        this.setState({cylinders:cyls})\n    }\n    saveState(){\n        this.setState({saveAlert:true})\n        let state = this.state\n        state.saveAlert = false\n        localStorage.setItem('LOxSavedState', JSON.stringify(state));\n        setTimeout(this.hideSaveAlert.bind(this), 2000)\n    }\n    getSavedState(){\n        return JSON.parse(localStorage.getItem('LOxSavedState'));\n    }\n    hideSaveAlert(){\n        this.setState({saveAlert:false})\n    }\n    render() {\n        const l_o2_stp = this.state.lox_exp_ratio * this.state.lox_l_per_kg * 1000\n        const calculated_supply = Math.round(this.state.vie_total_supply * l_o2_stp)\n        const calculated_cylinder_volume = this.state.cylinders.map((cyl)=>{return cyl.cylinder_volume * cyl.cylinder_atm * cyl.cylinder_count}).reduce((total, cyl, i)=>{\n            return total+cyl\n        })\n        let cylinders = this.state.cylinders.map((cylinder, index)=>{\n            return <Cylinder key={index} id={index} cylinder_count={cylinder.cylinder_count}\n                             cylinder_volume={cylinder.cylinder_volume}\n                             cylinder_atm={cylinder.cylinder_atm}\n                             removeCylinder={this.removeCylinder.bind(this)}\n                             onChange={this.onChangeCylinder.bind(this)}/>\n        })\n\n        return (\n            <div className=\"App\">\n\n                                <Button variant={\"secondary\"} style={{position:\"fixed\",right:\"70px\",top:\"5px\"}} onClick={this.saveState.bind(this)}><MdSave size={20}/></Button>\n                <header className=\"App-header\">\n                Oxygen supply/demand calculator\n                    <div className=\"subHeader text-secondary\">Figures entered here are for GSH but feel free to copy and use</div>\n\n                    <br/>\n                </header>\n                <body className=\"App-body\">\n                                {this.state.saveAlert ?   <Alert key={\"saved\"} variant={\"success\"} className={\"btn-sm\"} onClose={this.hideSaveAlert.bind(this)}dismissable> Saved to browser storage </Alert>: null}\n                    <Form style={{maxWidth:\"836px\", width:\"100vw\"}}>\n                    <Accordion defaultActiveKey=\"0\" >\n                            <Accordion.Toggle as={Button} variant={\"secondary\"} eventKey=\"config\" style={{position:\"fixed\",right:\"10px\",top:\"5px\"}}><MdSettings size={20}/></Accordion.Toggle>\n                            <Accordion.Collapse eventKey=\"config\">\n\n                            <Card className=\"extra-margin\">\n\n                                <Card.Body>\n                                    <Number label={\"Ambient Pressure\"} value={this.state.ambient_pressure}\n                                            onChange={this.onChange.bind(this)} item={\"ambient_pressure\"}\n                                            suffix={\"mBar\"}/>\n                                    <Number label={\"LOx - Expansion Ratio\"} value={this.state.lox_exp_ratio}\n                                            onChange={this.onChange.bind(this)} item={\"lox_exp_ratio\"}\n                                            suffix={\"x STP\"}/>\n                                    <Number label={\"LOx - Litre per KG\"} value={this.state.lox_l_per_kg}\n                                            onChange={this.onChange.bind(this)} item={\"lox_l_per_kg\"}\n                                            suffix={\"Litres\"}/>\n                                </Card.Body>\n                        </Card>\n\n                            </Accordion.Collapse>\n                        <Card>\n                            <Card.Header>Supply</Card.Header>\n                            <Card.Body>\n                                <div className=\"internalHeader\" >LOx Supply</div>\n                                <Number label={\"VIE Total Supply\"} value={this.state.vie_total_supply}\n                                        tooltip={\"\"} onChange={this.onChange.bind(this)} item={\"vie_total_supply\"}\n                                        suffix={\"tons (excludes 1 ton minimum remaining volume)\"}>test</Number>\n                                <Number label={\"VIE Total Supply\"} value={calculated_supply}\n                                        tooltip={\"\"} suffix={\"litres (at ambient)\"} readonly={true}/>\n                                <div className=\"internalHeader\">Bank Supply</div>\n                                <ListGroup>\n                                    <ListGroup.Item>\n                                        {cylinders}\n                                                                        <Button variant={\"secondary\"} onClick={this.addCylinder.bind(this)} style={{float: \"left\"}} size={\"sm\"}> + </Button>\n                                    </ListGroup.Item>\n                                </ListGroup>\n                                <Number label={\"at Full Pressure\"} value={calculated_cylinder_volume}\n                                        tooltip={\"\"} suffix={\"Litres at ambient\"} readonly={true}/>\n                            </Card.Body>\n                        </Card>\n                        <Card className=\"extra-margin\">\n                            <Card.Header>Usage</Card.Header>\n                            <Card.Body>\n                                <InputGroup className=\"mb-3\">\n                                    <InputGroup.Text>{\"LOx used at\"}</InputGroup.Text>\n                                    <FormControl type={\"number\"} value={this.state.tons_per_day_usage}\n                                                  onChange={(event)=>{this.onChange(\"tons_per_day_usage\", event.target.value)}}\n                                                 onBlur={(event)=>{this.onChange(\"litres_per_min_use\", (event.target.value*l_o2_stp/(24*60)).toFixed(2))}}/>\n                                    <InputGroup.Text>{\"Tons/Day\"}</InputGroup.Text>\n                                    <FormControl type={\"number\"} value={this.state.litres_per_min_use}\n                                                 onChange={(event)=>{this.onChange(\"litres_per_min_use\", event.target.value)}}\n                                                 onBlur={(event)=>{this.onChange(\"tons_per_day_usage\", (event.target.value*24*60/l_o2_stp).toFixed(2))}}/>\n                                    <InputGroup.Text>{\"litres/min average\"}</InputGroup.Text>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <InputGroup.Text>{\"LOx Supplied from Engineering:\"}</InputGroup.Text>\n                                    <FormControl type={\"number\"} value={this.state.litres_per_min_capacity} onChange={(event)=>{this.onChange(\"litres_per_min_capacity\", event.target.value)}}/>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <InputGroup.Text>{\"LOx available at current rate:\"}</InputGroup.Text>\n                                    <FormControl type={\"number\"} value={((calculated_supply+calculated_cylinder_volume)/this.state.litres_per_min_use).toFixed(1)}/>\n                                    <InputGroup.Text>{\"Max Rate based on Supply:\"}</InputGroup.Text>\n                                    <FormControl type={\"number\"} value={((calculated_supply+calculated_cylinder_volume)/this.state.litres_per_min_capacity).toFixed(1)}/>\n                                    <InputGroup.Text>{\"Minutes\"}</InputGroup.Text>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <InputGroup.Text>{\"LOx available at current rate:\"}</InputGroup.Text>\n                                    <FormControl type={\"number\"} value={((calculated_supply+calculated_cylinder_volume)/this.state.litres_per_min_use/60).toFixed(1)}/>\n                                    <InputGroup.Text>{\"Max Rate based on Supply:\"}</InputGroup.Text>\n                                    <FormControl type={\"number\"} value={((calculated_supply+calculated_cylinder_volume)/this.state.litres_per_min_capacity/60).toFixed(1)}/>\n                                    <InputGroup.Text>{\"Hours\"}</InputGroup.Text>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <InputGroup.Text>{\"LOx available at current rate:\"}</InputGroup.Text>\n                                    <FormControl type={\"number\"} value={((calculated_supply+calculated_cylinder_volume)/this.state.litres_per_min_use/60/24).toFixed(1)}/>\n                                    <InputGroup.Text>{\"Max Rate based on Supply:\"}</InputGroup.Text>\n                                    <FormControl type={\"number\"} value={((calculated_supply+calculated_cylinder_volume)/this.state.litres_per_min_capacity/60/24).toFixed(1)}/>\n                                    <InputGroup.Text>{\"Days\"}</InputGroup.Text>\n                                </InputGroup>\n                            </Card.Body>\n                        </Card>\n                        <Card className=\"extra-margin\">\n                            <Card.Header>Demand Prediction</Card.Header>\n                            <Card.Body>\n                                <Table striped bordered hover size=\"sm\">\n                                  <thead>\n                                    <tr>\n                                      <th style={{width:\"200px\"}}></th>\n                                      <th style={{width:\"100px\"}} className=\"form-control-sm\">Patients</th>\n                                      <th style={{width:\"250px\"}} className=\"form-control-sm\">Criterion</th>\n                                      <th className=\"form-control-sm\">Flow req</th>\n                                      <th className=\"form-control-sm\">Use per category</th>\n                                    </tr>\n                                  </thead>\n                                  <tbody>\n                                  <DemandRow key={\"leakage\"} what={\"Leakage/Loss\"} criterion={\"liters/min (estimated):\"} patients={\"0.5% of current flow rate\"} id={\"leakage\"}\n                                                        flow_req={this.state.litres_per_min_use*0.005} use_per_category={this.state.litres_per_min_use*0.005} onChangeDemand={this.onChangeDemand.bind(this)}/>\n                                  {this.state.demand_prediction.map((demand, id)=>{\n                                      return <DemandRow key={id} what={demand.what} criterion={demand.criterion} patients={demand.patients} id={id}\n                                                        flow_req={demand.flow_req} onChangeDemand={this.onChangeDemand.bind(this)}/>\n                                    })}\n                                  </tbody>\n                                </Table>\n                                <InputGroup className=\"mb-3\">\n                                    <InputGroup.Text>{\"Total Use\"}</InputGroup.Text>\n                                    <FormControl type={\"number\"} value={this.state.litres_per_min_use*0.005+this.state.demand_prediction.map((d)=>d.flow_req*d.patients).reduce((a,b)=>a+b)}/>\n                                    <InputGroup.Text>{\"l/min\"}</InputGroup.Text>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <InputGroup.Text>{\"Total Use\"}</InputGroup.Text>\n                                    <FormControl type={\"number\"} value={this.state.demand_prediction.map((d)=>d.flow_req*d.patients).reduce((a,b)=>a+b)*60}/>\n                                    <InputGroup.Text>{\"l/hr\"}</InputGroup.Text>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <InputGroup.Text>{\"Total Use\"}</InputGroup.Text>\n                                    <FormControl type={\"number\"} value={this.state.demand_prediction.map((d)=>d.flow_req*d.patients).reduce((a,b)=>a+b)*60*24}/>\n                                    <InputGroup.Text>{\"l/day\"}</InputGroup.Text>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <InputGroup.Text>{\"Total Use\"}</InputGroup.Text>\n                                    <FormControl type={\"number\"} value={this.state.demand_prediction.map((d)=>d.flow_req*d.patients).reduce((a,b)=>a+b)*60*24/l_o2_stp}/>\n                                    <InputGroup.Text>{\"tons/day\"}</InputGroup.Text>\n                                </InputGroup>\n                                </Card.Body>\n                        </Card>\n                    </Accordion>\n                    </Form>\n                <div className=\"subHeader text-secondary\" style={{fontSize:\"15px\"}}>Developed by Ross Hofmeyr and coded by Steve Hofmeyr. <a href=\"https://github.com/stevehof/lox\">Source Code</a></div>\n                </body>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}